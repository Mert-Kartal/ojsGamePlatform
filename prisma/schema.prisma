// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Kullanıcı modeli
model User {
  id                 Int            @id @default(autoincrement())
  username           String         @unique
  email              String         @unique
  password           String
  name               String?
  profileImage       String?
  isAdmin            Boolean        @default(false)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  deletedAt          DateTime?
  emailVerified      Boolean        @default(false)
  emailVerifyToken   String?        @unique
  emailVerifyExpires DateTime?
  resetToken         String?        @unique
  resetTokenExpires  DateTime?
  notifications      Notification[]

  // İlişkiler
  library   Library[]
  reviews   Review[]
  friends   Friendship[] @relation("userFriends")
  friendsOf Friendship[] @relation("friendsOfUser")
  wishlist  Wishlist[]
  cart      Cart? // Bir kullanıcının tek bir aktif sepeti olabilir
}

// Oyun modeli
model Game {
  id          Int       @id @default(autoincrement())
  title       String
  description String    @db.Text
  price       Float
  releaseDate DateTime
  developer   String
  publisher   String
  coverImage  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  // İlişkiler
  categories CategoryOnGame[]
  library    Library[]
  reviews    Review[]
  wishlist   Wishlist[]
  cartItems  GameItem[] // Sepet öğeleri ilişkisi
}

// Kategori modeli
model Category {
  id   Int    @id @default(autoincrement())
  name String @unique

  games CategoryOnGame[]
}

// Oyun-Kategori ilişki modeli
model CategoryOnGame {
  gameId     Int
  categoryId Int

  game     Game     @relation(fields: [gameId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@id([gameId, categoryId])
}

// Kütüphane modeli
model Library {
  id         Int       @id @default(autoincrement())
  userId     Int
  gameId     Int
  addedAt    DateTime  @default(now())
  lastPlayed DateTime?

  user User @relation(fields: [userId], references: [id])
  game Game @relation(fields: [gameId], references: [id])

  @@unique([userId, gameId])
}

// İnceleme modeli
model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  gameId    Int
  content   String   @db.Text
  rating    Int      @db.SmallInt
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // İlişkiler
  user User @relation(fields: [userId], references: [id])
  game Game @relation(fields: [gameId], references: [id])

  @@unique([userId, gameId])
}

// Arkadaşlık modeli
model Friendship {
  id        Int              @id @default(autoincrement())
  userId    Int
  friendId  Int
  status    FriendshipStatus @default(PENDING)
  createdAt DateTime         @default(now())

  user   User @relation("userFriends", fields: [userId], references: [id])
  friend User @relation("friendsOfUser", fields: [friendId], references: [id])

  @@unique([userId, friendId])
}

// İstek listesi modeli
model Wishlist {
  id      Int      @id @default(autoincrement())
  userId  Int
  gameId  Int
  addedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  game Game @relation(fields: [gameId], references: [id])

  @@unique([userId, gameId])
}

// Enum tanımlamaları
enum FriendshipStatus {
  PENDING
  ACCEPTED
  BLOCKED
}

model Cart {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique // Her kullanıcının tek bir aktif sepeti olabilir
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // İlişkiler
  user  User       @relation(fields: [userId], references: [id])
  items GameItem[] // Sepetteki oyunlar

  @@map("carts")
}

model GameItem {
  id      Int      @id @default(autoincrement())
  cartId  Int // Hangi sepete ait
  gameId  Int // Hangi oyun
  addedAt DateTime @default(now())

  // İlişkiler
  cart Cart @relation(fields: [cartId], references: [id], onDelete: Cascade)
  game Game @relation(fields: [gameId], references: [id])

  @@unique([cartId, gameId]) // Bir sepette aynı oyundan sadece bir tane olabilir
  @@map("cart_items")
}

// Bildirim tipleri için enum
enum NotificationType {
  FRIEND_REQUEST // Arkadaşlık isteği alındığında
  FRIEND_ACCEPT // Arkadaşlık isteği kabul edildiğinde
  GAME_SALE // İstek listesindeki bir oyun indirime girdiğinde
  SYSTEM_MESSAGE // Sistem bildirimleri için
}

// Bildirim modeli
model Notification {
  id        Int              @id @default(autoincrement())
  userId    Int
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  metadata  Json?

  // İlişkiler
  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([createdAt])
}

/**
 * front
 * email
 * form validation req query library
 * cron
 * validation middleware var 2 param(query,body) zod schema al,
 * typebox
 * prismabox
 */

//sepet email ile giriş ve bildirim
